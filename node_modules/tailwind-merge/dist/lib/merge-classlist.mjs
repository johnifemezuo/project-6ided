var SPLIT_CLASSES_REGEX = /\s+/;
var IMPORTANT_MODIFIER = '!'; // Regex is needed so we don't match against colons in labels for arbitrary values like `text-[color:var(--mystery-var)]`
// I'd prefer to use a negative lookbehind for all supported labels, but lookbheinds don't have good browser support yet. More info: https://caniuse.com/js-regexp-lookbehind

var MODIFIER_SEPARATOR_REGEX = /:(?![^[]*\])/;
var MODIFIER_SEPARATOR = ':';
function mergeClassList(classList, configUtils) {
  var getClassGroupId = configUtils.getClassGroupId,
      getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
  /**
   * Set of classGroupIds in following format:
   * `{importantModifier}{variantModifiers}{classGroupId}`
   * @example 'float'
   * @example 'hover:focus:bg-color'
   * @example '!md:pr'
   */

  var classGroupsInConflict = new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function (originalClassName) {
    var modifiers = originalClassName.split(MODIFIER_SEPARATOR_REGEX);
    var classNameWithImportantModifier = modifiers.pop();
    var hasImportantModifier = classNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    var className = hasImportantModifier ? classNameWithImportantModifier.substring(1) : classNameWithImportantModifier;
    var classGroupId = getClassGroupId(className);

    if (!classGroupId) {
      return {
        isTailwindClass: false,
        originalClassName: originalClassName
      };
    }

    var variantModifier = modifiers.length === 0 ? '' : modifiers.sort().concat('').join(MODIFIER_SEPARATOR);
    var fullModifier = hasImportantModifier ? IMPORTANT_MODIFIER + variantModifier : variantModifier;
    return {
      isTailwindClass: true,
      modifier: fullModifier,
      classGroupId: classGroupId,
      originalClassName: originalClassName
    };
  }).reverse() // Last class in conflict wins, so we need to filter conflicting classes in reverse order.
  .filter(function (parsed) {
    if (!parsed.isTailwindClass) {
      return true;
    }

    var modifier = parsed.modifier,
        classGroupId = parsed.classGroupId;
    var classId = modifier + ":" + classGroupId;

    if (classGroupsInConflict.has(classId)) {
      return false;
    }

    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId).forEach(function (group) {
      return classGroupsInConflict.add(modifier + ":" + group);
    });
    return true;
  }).reverse().map(function (parsed) {
    return parsed.originalClassName;
  }).join(' ');
}

export { mergeClassList };
//# sourceMappingURL=merge-classlist.mjs.map
