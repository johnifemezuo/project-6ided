{"version":3,"file":"create-tailwind-merge.mjs","sources":["../../src/lib/create-tailwind-merge.ts"],"sourcesContent":["import { createConfigUtils } from './config-utils'\nimport { Config } from './types'\nimport { mergeClassList } from './merge-classlist'\n\ntype CreateConfigFirst = () => Config\ntype CreateConfigSubsequent = (config: Config) => Config\ntype ClassLists = ClassListElement[]\ntype ClassListElement = string | undefined | null | false\ntype TailwindMerge = (...classLists: ClassLists) => string\ntype ConfigUtils = ReturnType<typeof createConfigUtils>\n\nexport function createTailwindMerge(\n    ...createConfig: [CreateConfigFirst, ...CreateConfigSubsequent[]]\n): TailwindMerge {\n    let configUtils: ConfigUtils\n    let cacheGet: ConfigUtils['cache']['get']\n    let cacheSet: ConfigUtils['cache']['set']\n    let functionToCall = initTailwindMerge\n\n    function initTailwindMerge(classList: string) {\n        const [firstCreateConfig, ...restCreateConfig] = createConfig\n\n        const config = restCreateConfig.reduce(\n            (previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig),\n            firstCreateConfig()\n        )\n\n        configUtils = createConfigUtils(config)\n        cacheGet = configUtils.cache.get\n        cacheSet = configUtils.cache.set\n        functionToCall = tailwindMerge\n\n        return tailwindMerge(classList)\n    }\n\n    function tailwindMerge(classList: string) {\n        const cachedResult = cacheGet(classList)\n\n        if (cachedResult) {\n            return cachedResult\n        }\n\n        const result = mergeClassList(classList, configUtils)\n        cacheSet(classList, result)\n\n        return result\n    }\n\n    return function callTailwindMerge() {\n        let classList = ''\n        let temp: ClassListElement\n\n        // Credits â†’ https://github.com/lukeed/clsx/blob/v1.1.1/src/index.js\n        for (let index = 0; index < arguments.length; index += 1) {\n            if ((temp = arguments[index])) {\n                classList && (classList += ' ')\n                classList += temp\n            }\n        }\n\n        return functionToCall(classList)\n    }\n}\n"],"names":["createTailwindMerge","createConfig","configUtils","cacheGet","cacheSet","functionToCall","initTailwindMerge","classList","firstCreateConfig","restCreateConfig","config","reduce","previousConfig","createConfigCurrent","createConfigUtils","cache","get","set","tailwindMerge","cachedResult","result","mergeClassList","callTailwindMerge","temp","index","arguments","length"],"mappings":";;;SAWgBA;oCACTC;AAAAA,IAAAA;;;AAEH,MAAIC,WAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,cAAc,GAAGC,iBAArB;;AAEA,WAASA,iBAAT,CAA2BC,SAA3B;AACI,QAAOC,iBAAP,GAAiDP,YAAjD;AAAA,QAA6BQ,gBAA7B,GAAiDR,YAAjD;AAEA,QAAMS,MAAM,GAAGD,gBAAgB,CAACE,MAAjB,CACX,UAACC,cAAD,EAAiBC,mBAAjB;AAAA,aAAyCA,mBAAmB,CAACD,cAAD,CAA5D;AAAA,KADW,EAEXJ,iBAAiB,EAFN,CAAf;AAKAN,IAAAA,WAAW,GAAGY,iBAAiB,CAACJ,MAAD,CAA/B;AACAP,IAAAA,QAAQ,GAAGD,WAAW,CAACa,KAAZ,CAAkBC,GAA7B;AACAZ,IAAAA,QAAQ,GAAGF,WAAW,CAACa,KAAZ,CAAkBE,GAA7B;AACAZ,IAAAA,cAAc,GAAGa,aAAjB;AAEA,WAAOA,aAAa,CAACX,SAAD,CAApB;AACH;;AAED,WAASW,aAAT,CAAuBX,SAAvB;AACI,QAAMY,YAAY,GAAGhB,QAAQ,CAACI,SAAD,CAA7B;;AAEA,QAAIY,YAAJ,EAAkB;AACd,aAAOA,YAAP;AACH;;AAED,QAAMC,MAAM,GAAGC,cAAc,CAACd,SAAD,EAAYL,WAAZ,CAA7B;AACAE,IAAAA,QAAQ,CAACG,SAAD,EAAYa,MAAZ,CAAR;AAEA,WAAOA,MAAP;AACH;;AAED,SAAO,SAASE,iBAAT;AACH,QAAIf,SAAS,GAAG,EAAhB;AACA,QAAIgB,IAAJ;;AAGA,SAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGC,SAAS,CAACC,MAAtC,EAA8CF,KAAK,IAAI,CAAvD,EAA0D;AACtD,UAAKD,IAAI,GAAGE,SAAS,CAACD,KAAD,CAArB,EAA+B;AAC3BjB,QAAAA,SAAS,KAAKA,SAAS,IAAI,GAAlB,CAAT;AACAA,QAAAA,SAAS,IAAIgB,IAAb;AACH;AACJ;;AAED,WAAOlB,cAAc,CAACE,SAAD,CAArB;AACH,GAbD;AAcH;;;;"}