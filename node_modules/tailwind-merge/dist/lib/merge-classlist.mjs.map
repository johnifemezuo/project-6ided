{"version":3,"file":"merge-classlist.mjs","sources":["../../src/lib/merge-classlist.ts"],"sourcesContent":["import { ConfigUtils } from './config-utils'\n\nconst SPLIT_CLASSES_REGEX = /\\s+/\nconst IMPORTANT_MODIFIER = '!'\n// Regex is needed so we don't match against colons in labels for arbitrary values like `text-[color:var(--mystery-var)]`\n// I'd prefer to use a negative lookbehind for all supported labels, but lookbheinds don't have good browser support yet. More info: https://caniuse.com/js-regexp-lookbehind\nconst MODIFIER_SEPARATOR_REGEX = /:(?![^[]*\\])/\nconst MODIFIER_SEPARATOR = ':'\n\nexport function mergeClassList(classList: string, configUtils: ConfigUtils) {\n    const { getClassGroupId, getConflictingClassGroupIds } = configUtils\n\n    /**\n     * Set of classGroupIds in following format:\n     * `{importantModifier}{variantModifiers}{classGroupId}`\n     * @example 'float'\n     * @example 'hover:focus:bg-color'\n     * @example '!md:pr'\n     */\n    const classGroupsInConflict = new Set<string>()\n\n    return (\n        classList\n            .trim()\n            .split(SPLIT_CLASSES_REGEX)\n            .map((originalClassName) => {\n                const modifiers = originalClassName.split(MODIFIER_SEPARATOR_REGEX)\n                const classNameWithImportantModifier = modifiers.pop()!\n\n                const hasImportantModifier =\n                    classNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER)\n                const className = hasImportantModifier\n                    ? classNameWithImportantModifier.substring(1)\n                    : classNameWithImportantModifier\n\n                const classGroupId = getClassGroupId(className)\n\n                if (!classGroupId) {\n                    return {\n                        isTailwindClass: false as const,\n                        originalClassName,\n                    }\n                }\n\n                const variantModifier =\n                    modifiers.length === 0\n                        ? ''\n                        : modifiers.sort().concat('').join(MODIFIER_SEPARATOR)\n\n                const fullModifier = hasImportantModifier\n                    ? IMPORTANT_MODIFIER + variantModifier\n                    : variantModifier\n\n                return {\n                    isTailwindClass: true as const,\n                    modifier: fullModifier,\n                    classGroupId,\n                    originalClassName,\n                }\n            })\n            .reverse()\n            // Last class in conflict wins, so we need to filter conflicting classes in reverse order.\n            .filter((parsed) => {\n                if (!parsed.isTailwindClass) {\n                    return true\n                }\n\n                const { modifier, classGroupId } = parsed\n\n                const classId = `${modifier}:${classGroupId}`\n\n                if (classGroupsInConflict.has(classId)) {\n                    return false\n                }\n\n                classGroupsInConflict.add(classId)\n\n                getConflictingClassGroupIds(classGroupId).forEach((group) =>\n                    classGroupsInConflict.add(`${modifier}:${group}`)\n                )\n\n                return true\n            })\n            .reverse()\n            .map((parsed) => parsed.originalClassName)\n            .join(' ')\n    )\n}\n"],"names":["SPLIT_CLASSES_REGEX","IMPORTANT_MODIFIER","MODIFIER_SEPARATOR_REGEX","MODIFIER_SEPARATOR","mergeClassList","classList","configUtils","getClassGroupId","getConflictingClassGroupIds","classGroupsInConflict","Set","trim","split","map","originalClassName","modifiers","classNameWithImportantModifier","pop","hasImportantModifier","startsWith","className","substring","classGroupId","isTailwindClass","variantModifier","length","sort","concat","join","fullModifier","modifier","reverse","filter","parsed","classId","has","add","forEach","group"],"mappings":"AAEA,IAAMA,mBAAmB,GAAG,KAA5B;AACA,IAAMC,kBAAkB,GAAG,GAA3B;AAEA;;AACA,IAAMC,wBAAwB,GAAG,cAAjC;AACA,IAAMC,kBAAkB,GAAG,GAA3B;SAEgBC,eAAeC,WAAmBC;AAC9C,MAAQC,eAAR,GAAyDD,WAAzD,CAAQC,eAAR;AAAA,MAAyBC,2BAAzB,GAAyDF,WAAzD,CAAyBE,2BAAzB;AAEA;;;;;;;;AAOA,MAAMC,qBAAqB,GAAG,IAAIC,GAAJ,EAA9B;AAEA,SACIL,SAAS,CACJM,IADL,GAEKC,KAFL,CAEWZ,mBAFX,EAGKa,GAHL,CAGS,UAACC,iBAAD;AACD,QAAMC,SAAS,GAAGD,iBAAiB,CAACF,KAAlB,CAAwBV,wBAAxB,CAAlB;AACA,QAAMc,8BAA8B,GAAGD,SAAS,CAACE,GAAV,EAAvC;AAEA,QAAMC,oBAAoB,GACtBF,8BAA8B,CAACG,UAA/B,CAA0ClB,kBAA1C,CADJ;AAEA,QAAMmB,SAAS,GAAGF,oBAAoB,GAChCF,8BAA8B,CAACK,SAA/B,CAAyC,CAAzC,CADgC,GAEhCL,8BAFN;AAIA,QAAMM,YAAY,GAAGf,eAAe,CAACa,SAAD,CAApC;;AAEA,QAAI,CAACE,YAAL,EAAmB;AACf,aAAO;AACHC,QAAAA,eAAe,EAAE,KADd;AAEHT,QAAAA,iBAAiB,EAAjBA;AAFG,OAAP;AAIH;;AAED,QAAMU,eAAe,GACjBT,SAAS,CAACU,MAAV,KAAqB,CAArB,GACM,EADN,GAEMV,SAAS,CAACW,IAAV,GAAiBC,MAAjB,CAAwB,EAAxB,EAA4BC,IAA5B,CAAiCzB,kBAAjC,CAHV;AAKA,QAAM0B,YAAY,GAAGX,oBAAoB,GACnCjB,kBAAkB,GAAGuB,eADc,GAEnCA,eAFN;AAIA,WAAO;AACHD,MAAAA,eAAe,EAAE,IADd;AAEHO,MAAAA,QAAQ,EAAED,YAFP;AAGHP,MAAAA,YAAY,EAAZA,YAHG;AAIHR,MAAAA,iBAAiB,EAAjBA;AAJG,KAAP;AAMH,GArCL,EAsCKiB,OAtCL;AAAA,GAwCKC,MAxCL,CAwCY,UAACC,MAAD;AACJ,QAAI,CAACA,MAAM,CAACV,eAAZ,EAA6B;AACzB,aAAO,IAAP;AACH;;AAED,QAAQO,QAAR,GAAmCG,MAAnC,CAAQH,QAAR;AAAA,QAAkBR,YAAlB,GAAmCW,MAAnC,CAAkBX,YAAlB;AAEA,QAAMY,OAAO,GAAMJ,QAAN,SAAkBR,YAA/B;;AAEA,QAAIb,qBAAqB,CAAC0B,GAAtB,CAA0BD,OAA1B,CAAJ,EAAwC;AACpC,aAAO,KAAP;AACH;;AAEDzB,IAAAA,qBAAqB,CAAC2B,GAAtB,CAA0BF,OAA1B;AAEA1B,IAAAA,2BAA2B,CAACc,YAAD,CAA3B,CAA0Ce,OAA1C,CAAkD,UAACC,KAAD;AAAA,aAC9C7B,qBAAqB,CAAC2B,GAAtB,CAA6BN,QAA7B,SAAyCQ,KAAzC,CAD8C;AAAA,KAAlD;AAIA,WAAO,IAAP;AACH,GA5DL,EA6DKP,OA7DL,GA8DKlB,GA9DL,CA8DS,UAACoB,MAAD;AAAA,WAAYA,MAAM,CAACnB,iBAAnB;AAAA,GA9DT,EA+DKc,IA/DL,CA+DU,GA/DV,CADJ;AAkEH;;;;"}